steps:

  # Environment
  - name: 'gcr.io/cloud-builders/docker'
    id: Environment
    entrypoint: bash
    args:
      - -c
      - |

        echo $REPO_NAME # bitbucket_aristides-neto_tux-app
        echo $BRANCH_NAME # master
        echo $SHORT_SHA #8ae4c71
        case $BRANCH_NAME in
          master | main) export build_env="-prd";;
          hml | homolog) export build_env="-hml";;
          *) echo "Branch invÃ¡lida"; exit 1;;
        esac

        export build_repo=$(echo $REPO_NAME | cut -d '_' -f3)$build_env
        export build_registry=$(echo $REPO_NAME | cut -d '_' -f3)/$BRANCH_NAME


        env | grep "^build_" > /workspace/build_vars
    waitFor: []

  # Sonarqube Scanner
  - name: 'gcr.io/cloud-builders/docker'
    id: SonarQube Scanner
    entrypoint: bash
    args:
      - -c
      - |

        source /workspace/build_vars

        apt install -y jq

        docker run --rm \
          -e SONAR_HOST_URL=http://35.225.36.251 \
          -e SONAR_LOGIN=$$SONAR_LOGIN \
          -v "/workspace:/usr/src" \
          sonarsource/sonar-scanner-cli \
        -Dsonar.projectKey=$REPO_NAME \
        -Dsonar.sources=.

        export quality_gate_status=$(curl -s -u $$SONAR_LOGIN: \
          http://35.225.36.251/api/qualitygates/project_status?projectKey=$REPO_NAME | jq '.projectStatus.status' | tr -d '"')

        if [ $quality_gate_status = 'OK' ]; then
          echo "SUCCESS: QUALITY GATE OK"
        else
          echo "ERROR: QUALITY GATE FAIL"
          exit 1
        fi;

    secretEnv: ['SONAR_LOGIN']
    waitFor: [Environment]

  # Docker Build
  - name: 'gcr.io/cloud-builders/docker'
    id: Docker Build
    entrypoint: bash
    args:
      - -c
      - |

        source /workspace/build_vars

        docker build -t us-central1-docker.pkg.dev/images-2rpnet/build_registry:$SHORT_SHA .
    waitFor: [SonarQube Scanner]

  # Docker Push
  - name: 'gcr.io/cloud-builders/docker'
    id: Docker Push
    entrypoint: bash
    args:
      - -c
      - |

        source /workspace/build_vars

        docker push us-central1-docker.pkg.dev/images-2rpnet/build_registry:$SHORT_SHA
    waitFor: [Docker Build]

  

  # Altera manifesto Kubernetes para nova imagem criada
  - name: 'gcr.io/cloud-builders/docker'
    id: Update Kubernetes
    entrypoint: bash
    args:
      - -c
      - |
        
        source /workspace/build_vars

        git clone https://$$BITBUCKET_TOKEN@bitbucket.org/aristides-neto/$build_repo.git
        cd tux-app-hml
        echo "OLD:" && cat *-dp.yaml
        sed -i "s|\(.us-central1-docker.pkg.dev/images-2rpnet/$build_registry:.*\)| us-central1-docker.pkg.dev/images-2rpnet/$build_registry:$SHORT_SHA|g" *-dp.yaml
        echo && echo "NEW:" && cat *-dp.yaml
        git config --global user.email cgloud@pipeline.com
        git config --global user.name "CloudBuildCICD"
        git add .
        git commit -am "Atualizado a imagem para a versao $SHORT_SHA"
        git push
    secretEnv: ['BITBUCKET_TOKEN']
    waitFor: [Docker Push]

logsBucket: 'gs://cicd_logs'
# options:
#   logging: GCS_ONLY
availableSecrets:
  secretManager:
  - versionName: projects/466193647327/secrets/SONAR_LOGIN/versions/latest
    env: 'SONAR_LOGIN'
  - versionName: projects/466193647327/secrets/BITBUCKET_TOKEN/versions/latest
    env: 'BITBUCKET_TOKEN'